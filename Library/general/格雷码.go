package main

// 参考资料：https://oi-wiki.org/misc/gray-code/
//
// 何为格雷码？
// 		一个二进制数系，其中两个相邻数的二进制位只有一位不同。
// 例如 3 位二进制数的格雷码序列为：000,001,011,010,110,111,101,100
// 000,001,011,010,110,111,101,100
// 000,001,010,011,100,101,110,111
//
// 构造格雷码的两种方法
// 1. 镜像构造（递归构造）
// 	k-1 位格雷码构造 k 位格雷码
// 		0{gray(k-1)正序}, 1{gary(k-1)逆序}
//
// 2. 手动构造（每次操作只会改变一位）
//    a. 翻转最低位得到下一个格雷码，（例如 000 --> 001）；
//	  b. 把最右边的 1 的左边的位翻转得到下一个格雷码，（例如 001 --> 011）
// 交替执行 a 和 b 操作 2^k-1 次，即可得到长度为 k 的格雷码序列

// 格雷码函数（从 0 开始构造）
// G(0) = 000
// G(1) = 001
// ...
// 其中下标从 0 开始，G(i) 表示第 i 个格雷码对应的二进制数
func G(n int) int {
	return n ^ (n >> 1)
}

// RG(i)：G(i) 逆函数，由格雷码推导出是第几个格雷码
func RG(g int) int {
	n := 0
	for g > 0 {
		n ^= g
		g >>= 1
	}
	return n
}

// 相关题目
// 1. leetcode 1611
// 		https://leetcode.com/contest/weekly-contest-209/problems/minimum-one-bit-operations-to-make-integers-zero/
